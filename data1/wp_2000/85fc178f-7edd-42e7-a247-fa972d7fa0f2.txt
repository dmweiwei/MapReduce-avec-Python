L'analyse sémantique latente (LSA, de l'anglais : Latent semantic analysis) ou indexation sémantique latente (ou LSI, de l'anglais : Latent semantic indexation) est un procédé de traitement des langues naturelles, dans le cadre de la sémantique vectorielle. La LSA fut brevetée en 1988 et publiée en 1990.
Elle permet d'établir des relations entre un ensemble de documents et les termes qu'ils contiennent, en construisant des "concepts" liés aux documents et aux termes.

Matrice des occurrences
La LSA utilise une matrice qui décrit l'occurrence de certains termes dans les documents. C'est une matrice creuse dont les lignes correspondent aux "termes" et dont les colonnes correspondent aux "documents".
Les "termes" sont généralement des mots tronqués ou ramenés à leur radical, issus de l'ensemble du corpus. On a donc le nombre d'apparition d'un mot dans chaque document, et pour tous les mots. Ce nombre est normalisé en utilisant la pondération tf-idf (de l'anglais : term frequency - inverse document frequency), combinaison de deux techniques : un coefficient de la matrice est d'autant plus grand qu'il apparaît beaucoup dans un document, et qu'il est rare - pour les mettre en avant.
Cette matrice est courante dans les modèles sémantiques standards, comme le modèle vectoriel, quoique sa forme matricielle ne soit pas systématique, étant donné qu'on ne se sert que rarement des propriétés mathématiques des matrices.
La LSA transforme la matrice des occurrences en une "relation" entre les termes et des "concepts", et une relation entre ces concepts et les documents. On peut donc relier des documents entre eux.

Applications
Cette organisation entre termes et concepts est généralement employée pour : la comparaison de documents dans l'espace des concepts (classification et catégorisation de documents, partitionnement de données) ;; la recherche de documents similaires entre différentes langues, en ayant accès à un dictionnaire de documents multilingues ;; la recherche de relations entre les termes (résolution de synonymie et de polysémie) ;; étant donné une requête, traduire les termes de la requête dans l'espace des concepts, pour retrouver des documents liés sémantiquement (recherche d'information).; trouver la meilleure similarité entre petits groupes de termes, de façon sémantique (c'est-à-dire dans le contexte d'un corpus de connaissance), comme par exemple dans la modélisation de la réponse aux questionnaires à choix multiples (QCM).
La résolution de la synonymie et de la polysémie est un enjeu majeur en traitement automatique des langues : deux synonymes décrivent une même idée, un moteur de recherche pourrait ainsi trouver des documents pertinents mais ne contenant pas le terme exact de la recherche ;; la polysémie d'un mot fait qu'il a plusieurs sens selon le contexte - on pourrait de même éviter des documents contenant le mot recherché, mais dans une acception qui ne correspond pas à ce que l'on désire ou au domaine considéré.

Réduction du rang
Après avoir construit la matrice des occurrences, la LSA permet de trouver une matrice de rang plus faible, qui donne une approximation de cette matrice des occurrences. On peut justifier cette approximation par plusieurs aspects : la matrice d'origine pourrait être trop grande pour les capacités de calcul de la machine - on rend ainsi le procédé réalisable, et c'est un "mal nécessaire" ;; la matrice d'origine peut être "bruitée" : des termes n'apparaissant que de manière anecdotique - on "nettoie" ainsi la matrice, c'est une opération qui améliore les résultats ;; la matrice d'origine peut être présumée "trop creuse" : elle contient plutôt les mots propres à chaque documents que les termes liés à plusieurs documents - c'est également un problème de synonymie.
Cependant, la réduction du rang de la matrice des occurrences a pour effet la combinaison de certaines dimensions qui peuvent ne pas être pertinentes. On s'arrange en général pour - tant que c'est possible - fusionner les termes de sens proches. Ainsi, une réduction du rang 3 au rang 2 pourra effectuer la transformation : ((Voiture), (Camion), (Fleur)) ((1,3452 Voiture + 0,2828 Camion), (Fleur)).
La synonymie est résolue de cette manière. Mais quelquefois cela n'est pas possible. Dans ces cas, la LSA peut effectuer la transformation suivante : ((Voiture), (Bouteille), (Fleur)) - ((1,3452 Voiture + 0,2828 Bouteille), (Fleur)).
Ce regroupement est beaucoup plus difficile à interpréter - il est justifié d'un point de vue mathématique, mais n'est pas pertinent pour un locuteur humain.

Description

Construction de la matrice des occurrences
Soit X la matrice où l'élément (i, j) décrit les occurrences du terme i dans le document j - par exemple la fréquence. Alors X aura cette allure : d j t i T (x 1 , 1... x 1 , n....... x m , 1... x m , n) (-displaystyle (-begin(matrix)(-textbf (d))-(j)---downarrow --(-textbf (t))-(i)(T)-rightarrow (-begin(pmatrix)x-(1,1)-dots x-(1,n)---vdots -ddots -vdots --x-(m,1)-dots x-(m,n)---end(pmatrix))-end(matrix))).
Une ligne de cette matrice est ainsi un vecteur qui correspond à un terme, et dont les composantes donnent sa présence (ou plutôt, son importance) dans chaque document : t i T - (x i , 1... x i , n) (-displaystyle (-textbf (t))-(i)(T)-(-begin(pmatrix)x-(i,1)-dots x-(i,n)-end(pmatrix))).
De même, une colonne de cette matrice est un vecteur qui correspond à un document, et dont les composantes sont l'importance dans son propre contenu de chaque terme. d j - (x 1 , j... x m , j) (-displaystyle (-textbf (d))-(j)-(-begin(pmatrix)x-(1,j)---vdots --x-(m,j)-end(pmatrix))).

Corrélations
Le produit scalaire : t i T t p (-displaystyle (-textbf (t))-(i)(T)(-textbf (t))-(p)).
entre deux vecteurs "termes" donne la corrélation entre deux termes sur l'ensemble du corpus. Le produit matriciel X X T (-displaystyle XX(T)) contient tous les produits scalaires de cette forme : l'élément (i, p) - qui est le même que l'élément (p, i) car la matrice est symétrique - est ainsi le produit scalaire : t i T t p (-displaystyle (-textbf (t))-(i)(T)(-textbf (t))-(p)) (- t p T t i (-displaystyle -(-textbf (t))-(p)(T)(-textbf (t))-(i))).
De même, le produit X T X (-displaystyle X(T)X) contient tous les produits scalaires entre les vecteurs "documents", qui donnent leurs corrélations sur l'ensemble du lexique : d j T d q - d q T d j (-displaystyle (-textbf (d))-(j)(T)(-textbf (d))-(q)-(-textbf (d))-(q)(T)(-textbf (d))-(j)).
Décomposition en valeurs singulières
On effectue alors une décomposition en valeurs singulières sur X, qui donne deux matrices orthonormales U et V et une matrice diagonale. On a alors : X - U V T (-displaystyle (-begin(matrix)X-U-Sigma V(T)-end(matrix))).
Les produits de matrice qui donnent les corrélations entre les termes d'une part et entre les documents d'autre part s'écrivent alors : X X T - (U V T) (U V T) T - (U V T) (V T T T U T) - U V T V T U T - U T U T X T X - (U V T) T (U V T) - (V T T T U T) (U V T) - V T U T U V T - V T V T (-displaystyle (-begin(matrix)XX(T)-(U-Sigma V(T))(U-Sigma V(T))(T)-(U-Sigma V(T))(V(T(T))-Sigma (T)U(T))-U-Sigma V(T)V-Sigma (T)U(T)-U-Sigma -Sigma (T)U(T)--X(T)X-(U-Sigma V(T))(T)(U-Sigma V(T))-(V(T(T))-Sigma (T)U(T))(U-Sigma V(T))-V-Sigma (T)U(T)U-Sigma V(T)-V-Sigma (T)-Sigma V(T)-end(matrix))).
Puisque les matrices T (-displaystyle -Sigma -Sigma (T)) et T (-displaystyle -Sigma (T)-Sigma) sont diagonales, U est faite des vecteurs propres de X X T (-displaystyle XX(T)), et V est faite des vecteurs propres de X T X (-displaystyle X(T)X). Les deux produits ont alors les mêmes valeurs propres non nulles - qui correspondent aux coefficients diagonaux non nuls de T (-displaystyle -Sigma -Sigma (T)). La décomposition s'écrit alors : X U V T (d j) (d j) (t i T) (x 1 , 1... x 1 , n....... x m , 1... x m , n) - (t i T) ((u 1)... (u l)) (1... 0....... 0... l) ((v 1)... (v l)) (-displaystyle (-begin(matrix)XU-Sigma V(T)--((-textbf (d))-(j))((-hat (-textbf (d)))-(j))---downarrow -downarrow --((-textbf (t))-(i)(T))-rightarrow (-begin(pmatrix)x-(1,1)-dots x-(1,n)-----vdots -ddots -vdots ----x-(m,1)-dots x-(m,n)---end(pmatrix))-((-hat (-textbf (t)))-(i)(T))-rightarrow (-begin(pmatrix)(-begin(pmatrix)-,---,--(-textbf (u))-(1)---,---,-end(pmatrix))-dots (-begin(pmatrix)-,---,--(-textbf (u))-(l)---,---,-end(pmatrix))-end(pmatrix))-cdot (-begin(pmatrix)-sigma -(1)-dots 0---vdots -ddots -vdots --0-dots -sigma -(l)---end(pmatrix))-cdot (-begin(pmatrix)(-begin(pmatrix)(-textbf (v))-(1)-end(pmatrix))---vdots --(-begin(pmatrix)(-textbf (v))-(l)-end(pmatrix))-end(pmatrix))-end(matrix))).
Les valeurs 1 ,.. l (-displaystyle -sigma -(1),-dots ,-sigma -(l)) sont les valeurs singulières de X. D'autre part, les vecteurs u 1 ,.. u l (-displaystyle u-(1),-dots ,u-(l)) et v 1 ,.. v l (-displaystyle v-(1),-dots ,v-(l)) sont respectivement singuliers à gauches et à droite.
On remarque également que la seule partie de U qui contribue à t i (-displaystyle (-textbf (t))-(i)) est la i ligne. On note désormais ce vecteur t i (-displaystyle (-hat (-textrm (t)))-(i)). De même la seule partie de V T (-displaystyle V(T)) qui contribue à d j (-displaystyle (-textbf (d))-(j)) est la j colonne, que l'on note d j (-displaystyle (-hat (-textrm (d)))-(j)).

Espace des concepts
Lorsqu'on sélectionne les k plus grandes valeurs singulières, ainsi que les vecteurs singuliers correspondants dans U et V, on obtient une approximation de rang k de la matrice des occurrences.
Le point important, c'est qu'en faisant cette approximation, les vecteurs "termes" et "documents" sont traduits dans l'espace des "concepts".
Le vecteur t i (-displaystyle (-hat (-textbf (t)))-(i)) possède alors k composantes, qui chacune donne l'importance du terme i dans chacun des k différents "concepts". De même, le vecteur d j (-displaystyle (-hat (-textbf (d)))-(j)) donne l'intensité des relations entre le document j et chaque concept. On écrit cette approximation sous la forme suivante : X k - U k k V k T (-displaystyle X-(k)-U-(k)-Sigma -(k)V-(k)(T)).
On peut alors effectuer les opérations suivantes : voir dans quelle mesure les documents j et q sont liés, dans l'espace des concepts, en comparant les vecteurs k d j (-displaystyle -Sigma -(k)(-hat (-textbf (d)))-(j)) et k d q (-displaystyle -Sigma -(k)(-hat (-textbf (d)))-(q)). On peut faire cela en évaluant la similarité cosinus. comparer les termes i et p en comparant les vecteurs t i (-displaystyle (-hat (-textbf (t)))-(i)) et t p (-displaystyle (-hat (-textbf (t)))-(p)) par la même méthode ;; une requête étant donnée, on peut la traiter comme un "mini-document" et la comparer dans l'espace des concepts à un corpus pour construire une liste des documents les plus pertinents. Pour faire cela, il faut déjà traduire la requête dans l'espace des concepts, en la transformant de la même manière que les documents. Si la requête est q, il faut calculer :. q - k 1 U k T q (-displaystyle (-hat (-textbf (q)))--Sigma -(k)(-1)U-(k)(T)(-textbf (q))) avant de comparer ce vecteur au corpus.
Implémentations
La décomposition en valeurs singulières est généralement calculée par des méthodes optimisées pour les matrices larges - par exemple l'algorithme de Lanczos - par des programmes itératifs, ou encore par des réseaux de neurones, cette dernière approche ne nécessitant pas que l'intégralité de la matrice soit gardée en mémoire.

Limitations
Les limites de LSA incluent : Celles du modèle sac de mots, sur lequel elle est basée, où le texte est représenté comme un ensemble non ordonné de mots.; L'impossibilité (dans le modèle de base) de prendre en compte la polysémie (c'est-à-dire les sens multiples d'un mot), car un mot ne correspond qu'à un seul point de l'espace sémantique.

Analyse sémantique latente probabiliste (PLSA)
Le modèle statistique de l'analyse sémantique latente ne correspond pas aux données observées : elle suppose que les mots et documents forment ensemble un modèle gaussien (c'est l'hypothèse ergodique), alors qu'on observe une distribution de Poisson.
Ainsi, une approche plus récente est l'analyse sémantique latente probabiliste, ou PLSA (de l'anglais : Probabilistic latent semantic analysis), basée sur un modèle multinomial.