Salsa20 est un chiffrement de flux proposé au projet eSTREAM par Daniel Bernstein. Il est architecturé autour d'une fonction pseudo-aléatoire basée sur des opérations d'addition sur 32 bits, d'addition exclusive (XOR) et de rotations sur les bits, qui transforme une clé de 256 bits, un nombre pseudo aléatoire de 64 bits, et une position de flux sur 64 bits en un bloc de données en sortie de 512 bits. Cela donne la possibilité à l'utilisateur de se positionner n'importe où dans le flux de sortie. Ses performances sont de 8 à 14 cycles par bit sur les microprocesseurs modernes d'architecture x86, et raisonnables par ailleurs en mode hardware. Ce procédé n'est pas breveté et Bernstein a écrit de nombreuses mises en oeuvre pour le domaine public, optimisées pour les architectures courantes.
Le fonctionnement interne du chiffrement, à base d'opérations binaires et de rotations sur 16 mots de 32 bits, évite les possibilités d'attaque temporelle dans les mises en oeuvre logicielles.
Salsa20 accomplit 20 étapes de mélange de ses données en entrée ; cependant des versions réduites existent sous les appellations de Salsa20-8 et Salsa20-12 utilisant, respectivement, 8 et 12 étapes initiales. Ces variantes furent introduites pour compléter l'offre du Salsa20 originel, déjà performant, afin d'être plus compétitif pour les tests au banc d'essai du projet eSTREAM.
En 2005, Paul Crowley exposa une attaque par cryptanalyse différentielle en 2 165 (-displaystyle 2(165)) opérations sur Salsa20-5 et remporta le prix de 1000 dollars de "la cryptanalyse la plus intéressante de Salsa20". En 2006, Fischer, Meier, Berbain, Biasse et Robshaw montrèrent une attaque en 2 177 (-displaystyle 2(177)) opérations sur Salsa20-6.
Salsa20 a été sélectionné en phase 2 en vue d'approfondissement (Phase 2 Focus) pour la partie logicielle (profile 1) et en phase 2 pour la partie matérielle (profile 2) du projet eSTREAM.
Aucune cryptanalyse n'a encore été reconnue sur Salsa20, Salsa20-12 ou Salsa20-8, en cette fin d'année 2006.