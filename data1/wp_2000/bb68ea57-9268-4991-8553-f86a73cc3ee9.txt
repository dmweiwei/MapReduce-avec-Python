Document Object Model (DOM) est une interface de programmation normalisée par le W3C, qui permet à des scripts d'examiner et de modifier le contenu du navigateur web. Par DOM la composition d'un document HTML ou XML est représentée sous forme d'un jeu d'objets reliés selon une structure en arbre. Les objets DOM peuvent représenter une fenêtre, un document, une phrase, un style... À l'aide de DOM un script peut modifier le document présent dans le navigateur en ajoutant ou en supprimant des noeuds de l'arbre.

Description
Document Object Model (DOM) signifie modèle à objets d'un document. modèle: Un modèle est comme un plan, il représente quelque chose, comme un plan de ville. Le DOM représente le document qui se trouve dans le navigateur. objet: En programmation, un objet est un conteneur qui comporte des propriétés et des méthodes - qui sont des variables et des actions concernant ce qu'il représente. Les objets DOM peuvent représenter une fenêtre, un document, une phrase, un style...; document: Le DOM concerne un document, tel qu'une page web affichée dans un navigateur. Une page web commence par une balise DOCTYPE suivi de la balise htmldans laquelle se trouve le reste du document. Par DOM le document est représenté par des noeuds (branches et feuilles) d'une structure en arbre.
Histoire
À l'origine DOM est un ensemble d'objets mis à disposition par Netscape Navigator. Il a ensuite fait l'objet de normalisations par le W3C, avant d'être incorporé dans la norme HTML5: Netscape Navigator 4 est paru en juin 1997, et Internet Explorer 4 en octobre la même année. Les deux navigateurs promettaient une avancée significative dans une nouveauté qui était à la mode: le DHTML. Le mot désigne le fait d'utiliser les technologies HTML, avec CSS et Javascript, dans le but de modifier à la volée le contenu et la présentation du document affiché dans le navigateur. Les deux navigateurs offraient la possibilité de manipuler le document à travers le DOM, cependant le même document n'était pas représenté de la même manière par les deux navigateurs. Ce problème a disparu suite à la normalisation du DOM par le W3C.

Mise en oeuvre
La spécification du W3C stipule les objets ainsi que les méthodes et les propriétés qu'un navigateur web doit impérativement mettre à disposition. Les principales catégories d'objet d'un arbre DOM sont le document, les éléments et les attributs. le document expose des informations concernant l'ensemble du document HTML ainsi que la balise html.; chaque element expose une balise d'un document HTML ou XML, et comporte une propriété attributes qui expose les attributs de la balise. Chaque élément comporte des méthodes permettant d'accéder aux élément parent, enfant et frères de l'arbre DOM.; chaque text contient le texte qui se trouve à l'intérieur d'une balise.
Chaque navigateur met en oeuvre le DOM dans son langage de programmation. La spécification du DOM est alignée avec le langage Javascript, reconnu par tous les navigateurs web. N'importe quelle partie d'une page web peut ainsi être modifiée par programmation, et le programme fonctionnera sur n'importe quel navigateur web conforme à la norme DOM.
Techniquement le DOM permet de lire et modifier n'importe quel document utilisant des balises, avec n'importe quel langage de programmation qui offre une interface de programmation DOM.

Évolution du DOM au sein des navigateurs web
Avant sa standardisation par le W3C, chaque navigateur web disposait de son propre Document Object Model. Si le langage de base destiné à manipuler les documents web a vite été standardisé autour de JavaScript, il n'en a pas été de même pour la série précise de fonctions à utiliser et la manière de parcourir le document. Par exemple, lorsque Netscape Navigator préconisait de parcourir un tableau indexé nommé document.layers, Internet Explorer l'appelait plutôt document.all, et ainsi de suite. En pratique, cela obligeait à écrire (au moins) deux versions de chaque morceau de script si l'on voulait rendre son site accessible au plus grand nombre.
La standardisation de ces techniques s'est faite en plusieurs étapes, lesquelles étendent chaque fois les possibilités précédentes sans jamais les remettre en cause.

DOM 1
La première est le DOM Level 1 publié en 1998 (le niveau 0 étant considéré comme l'implémentation de base figurant dans Netscape Navigator 2.0), où le W3C a défini une manière précise de représenter un document (en particulier un document XML) sous la forme d'un arbre. Chaque élément généré à partir du balisage comme, dans le cas de HTML, un paragraphe, un titre ou un bouton de formulaire, y forme un noeud. Est également définie une série de fonctions permettant de se déplacer dans cet arbre, d'y ajouter, modifier ou supprimer des éléments. En plus des fonctions génériques applicables à tout document structuré, des fonctions particulières ont été définies pour les documents HTML, permettant par exemple la gestion des formulaires. Le DOM Level 1 a été disponible dans sa plus grande partie dès les premières versions d'Internet Explorer 5 et de Netscape 6.

DOM 2
La seconde étape est le DOM Level 2 (publié en 2000), à présent constitué de six parties (en plus de Core et HTML, on trouvera Events, Style, View et Traversal and Range). Dans les évolutions de la brique de base (Core), on notera la possibilité d'identifier plus rapidement un noeud ou un groupe de noeuds au sein du document. Ainsi, pour obtenir un élément particulier on ne le recherchera plus dans un tableau comme dans les DOM propriétaires précédents, mais on appellera la fonction getElementById.

DOM 3 et 4
Le troisième niveau, publié au printemps 2004, a ajouté le support de XPath, la gestion d'événements clavier, et une interface de sérialisation de documents XML. Le quatrième niveau est en cours de développement, le Last Call Working Draft ayant été diffusé en février 2014.

Aspects techniques
DOM permet de représenter la structure d'un document et de ses éléments sous forme d'un arbre. Il est donc préférable de parcourir et de mémoriser l'intégralité du document avant de pouvoir effectuer les traitements voulus. Pour cette raison, les programmes utilisant DOM ont souvent une empreinte mémoire volumineuse en cours de traitement. À l'inverse, à partir d'un arbre DOM donné, il est possible de générer des documents dans le langage de balisage voulu, qui pourront à leur tour être manipulés par l'interface DOM.
DOM est utilisé pour pouvoir modifier facilement des documents XML ou accéder au contenu des pages web. Dans les cas ne nécessitant pas de manipuler les documents XML, mais juste de les lire, la méthode SAX peut également être choisie car elle traite les éléments de façon successive sans charger le document en mémoire. Elle s'impose quand la taille du document excède la capacité de la mémoire.

Événements
La capture d'un événement consiste à exécuter une action (par exemple un programme en JavaScript) lorsque l'événement surveillé se produit dans le document. Les événements capturables du DOM sont : événements page et fenêtre: onabort - s'il y a une interruption dans le chargement; onerror - en cas d'erreur pendant le chargement de la page; onload - après la fin du chargement de la page; onbeforeunload - se produit juste avant de décharger la page en cours (par changement de page, en quittant); onunload - se produit lors du déchargement de la page (par changement de page, en quittant); onresize - quand la fenêtre est redimensionnée.; onabort - s'il y a une interruption dans le chargement; onerror - en cas d'erreur pendant le chargement de la page; onload - après la fin du chargement de la page; onbeforeunload - se produit juste avant de décharger la page en cours (par changement de page, en quittant); onunload - se produit lors du déchargement de la page (par changement de page, en quittant); onresize - quand la fenêtre est redimensionnée; événements souris: onclick - sur un simple clic; ondblclick - sur un double clic; onmousedown - lorsque le bouton de la souris est enfoncé, sans forcément le relâcher; onmousemove - lorsque la souris est déplacée; onmouseout - lorsque la souris sort de l'élément; onmouseover - lorsque la souris est sur l'élément; onmouseup - lorsque le bouton de la souris est relâché; onscroll - lorsque le scroll de la souris est utilisé.; onclick - sur un simple clic; ondblclick - sur un double clic; onmousedown - lorsque le bouton de la souris est enfoncé, sans forcément le relâcher; onmousemove - lorsque la souris est déplacée; onmouseout - lorsque la souris sort de l'élément; onmouseover - lorsque la souris est sur l'élément; onmouseup - lorsque le bouton de la souris est relâché; onscroll - lorsque le scroll de la souris est utilisé; événements clavier: onkeydown - lorsqu'une touche est enfoncée; onkeypress - lorsqu'une touche est pressée et relâchée; onkeyup - lorsqu'une touche est relâchée.; onkeydown - lorsqu'une touche est enfoncée; onkeypress - lorsqu'une touche est pressée et relâchée; onkeyup - lorsqu'une touche est relâchée; événements formulaire: onblur - à la perte du focus; onchange - à la perte du focus si la valeur a changé; onfocus - lorsque l'élément prend le focus (ou devient actif); onreset - lors de la remise à zéro du formulaire (via un bouton "reset" ou une fonction reset); onselect - quand du texte est sélectionné; onsubmit - quand le formulaire est validé (via un bouton de type "submit" ou une fonction submit).; onblur - à la perte du focus; onchange - à la perte du focus si la valeur a changé; onfocus - lorsque l'élément prend le focus (ou devient actif); onreset - lors de la remise à zéro du formulaire (via un bouton "reset" ou une fonction reset); onselect - quand du texte est sélectionné; onsubmit - quand le formulaire est validé (via un bouton de type "submit" ou une fonction submit).