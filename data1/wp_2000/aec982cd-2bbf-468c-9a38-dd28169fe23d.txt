L'HyperText Markup Language, généralement abrégé HTML, est le format de données conçu pour représenter les pages web. C'est un langage de balisage permettant d'écrire de l'hypertexte, d'où son nom. HTML permet également de structurer sémantiquement et logiquement et de mettre en forme le contenu des pages, d'inclure des ressources multimédias dont des images, des formulaires de saisie, et des programmes informatiques. Il permet de créer des documents interopérables avec des équipements très variés de manière conforme aux exigences de l'accessibilité du web. Il est souvent utilisé conjointement avec le langage de programmation JavaScript et des feuilles de style en cascade (CSS). HTML est initialement dérivé du Standard Generalized Markup Language (SGML).

Dénominations
L'anglais Hypertext Markup Language se traduit littéralement en langage de balisage d'hypertexte. On utilise généralement le sigle HTML, parfois même en répétant le mot "langage" comme dans "langage HTML". Hypertext est parfois écrit HyperText pour marquer le T du sigle HTML.
Le public non averti parle parfois de HTM au lieu de HTML, HTM étant l'extension de nom de fichier tronquée à trois lettres, une limitation qu'on trouve sur d'anciens systèmes d'exploitation de Microsoft.

Évolution du langage
Durant la première moitié des années 1990, avant l'apparition des technologies web comme JavaScript, les feuilles de style en cascade et le Document Object Model, l'évolution de HTML a dicté l'évolution du World Wide Web. Depuis 1997 et HTML 4, l'évolution de HTML a fortement ralenti ; 10 ans plus tard, HTML 4 reste utilisé dans les pages web. En 2008, la spécification du HTML5 est à l'étude.

1989-1992 : Origine
HTML est une des trois inventions à la base du World Wide Web, avec le Hypertext Transfer Protocol (HTTP) et les adresses web. HTML a été inventé pour permettre d'écrire des documents hypertextuels liant les différentes ressources d'Internet avec des hyperliens. Aujourd'hui, ces documents sont appelés "page web". En août 1991, lorsque Tim Berners-Lee annonce publiquement le web sur Usenet, il ne cite que le langage SGML, mais donne l'URL d'un document de suffixe.html. Dans son livre Weaving the web, Tim Berners-Lee décrit la décision de baser HTML sur SGML comme étant aussi "diplomatique" que technique : techniquement, il trouvait SGML trop complexe, mais il voulait attirer la communauté hypertexte qui considérait que SGML était le langage le plus prometteur pour standardiser le format des documents hypertexte. En outre, SGML était déjà utilisé par son employeur, l'Organisation européenne pour la recherche nucléaire (CERN). Les premiers éléments du langage HTML comprennent le titre du document, les hyperliens, la structuration du texte en titres, sous-titres, listes ou texte brut, et un mécanisme rudimentaire de recherche par index. La description de HTML est alors assez informelle et principalement définie par le support des divers navigateurs web contemporains. Dan Connolly a aidé à faire de HTML une véritable application de SGML.

1993 : Apports de NCSA Mosaic
L'état de HTML correspond alors à ce que l'on pourrait appeler HTML 1.0. Il n'existe cependant aucune spécification portant ce nom, notamment parce que le langage était alors en pleine évolution. Un effort de normalisation était cependant en cours. À partir de fin 1993, le terme HTML+ est utilisé pour désigner la version future de HTML. Malgré l'effort de normalisation ainsi initié, et jusqu'à la fin des années 1990, HTML est principalement défini par les implémentations des navigateurs. Avec le navigateur NCSA Mosaic, HTML connaît deux inventions majeures. D'abord l'invention de l'élément IMG permet d'intégrer des images (dans un premier temps, uniquement aux formats GIF et XBM) aux pages web (Mosaic 0.10). Ensuite l'invention des formulaires (Mosaic 2.0pre5) rend le web interactif en permettant aux visiteurs de saisir des données dans les pages et de les envoyer au serveur web. Cette invention permet notamment de passer des commandes, donc d'utiliser le web pour faire du commerce électronique.

1994 : Apports de Netscape Navigator
Avec l'apparition de Netscape Navigator 0.9 le 13 octobre 1994, le support de nombreux éléments de présentation est ajouté : attributs de texte, clignotement, centrage, etc. Le développement de HTML prend alors deux voies divergentes. D'une part, les développeurs de navigateurs s'attachent à maximiser l'impact visuel des pages web en réponse aux demandes des utilisateurs. D'autre part, les concepteurs du web proposent d'étendre les capacités de description sémantique (logos, notes de bas de page, etc.) et les domaines d'applications (formules mathématiques, tables) de HTML. En ceci, ils suivent les principes de SGML consistant à laisser la présentation à un langage de style. En l'occurrence, les feuilles de style en cascade (CSS) sont prévues pour HTML. Seul le support des tables est rapidement intégré aux navigateurs, notamment parce qu'il permet une très nette amélioration de la présentation. Outre la multiplication des éléments de présentation, les logiciels d'alors produisant et consommant du HTML conçoivent souvent les documents comme une suite de commandes de formatage plutôt que comme un marquage représentant la structure en arbre aujourd'hui appelée Document Object Model (DOM). Le manque de structure du HTML alors mis en oeuvre est parfois dénoncé comme étant de la "soupe de balises", en anglais : tag soup.

1995-1996 : HTML 2.0
En mars 1995, le World Wide Web Consortium (W3C) nouvellement fondé propose le résultat de ses recherches sur HTML+ : le brouillon HTML 3.0. Il comprend notamment le support des tables, des figures et des expressions mathématiques. Ce brouillon expire le 28 septembre 1995 sans donner de suites directes. Fin 1995, le RFC 1866 décrivant HTML 2.0 est finalisé. Le principal éditeur est Dan Connolly. Ce document décrit HTML tel qu'il existait avant juin 1994, donc sans les nombreuses additions de Netscape Navigator.

1997 : HTML 3.2. et 4.0
Le 14 janvier 1997, le W3C publie la spécification HTML 3.2. Elle décrit la pratique courante observée début 1996, donc avec une partie des additions de Netscape Navigator et d'Internet Explorer. Ses plus importantes nouveautés sont la standardisation des tables et de nombreux éléments de présentation. HTML 3.2 précède de peu HTML 4.0 et contient des éléments en prévision du support des styles et des scripts. Le 18 décembre 1997, le W3C publie la spécification HTML 4.0 qui standardise de nombreuses extensions supportant les styles et les scripts, les cadres (frames) et les objets (inclusion généralisée de contenu). HTML 4.0 apporte également différentes améliorations pour l'accessibilité des contenus dont principalement la possibilité d'une séparation plus explicite entre structure et présentation du document, ou le support d'informations supplémentaires sur certains contenus complexes tels que les formulaires, les tableaux ou les sigles. HTML 4.0 introduit trois variantes du format, destinées à favoriser l'évolution vers un balisage plus signifiant, tout en tenant compte des limites temporaires des outils de production : la variante stricte (strict) exclut des éléments et attributs dits "de présentation", destinés à être remplacés par les styles CSS, ainsi que les éléments applet et frame qui sont remplacés par l'élément object conçu pour être plus apte à l'interopérabilité et à l'accessibilité.; la variante transitoire (transitional) étend la variante stricte en reprenant les éléments et attributs dépréciés de HTML 3.2, dont les éléments de présentation sont couramment utilisés par les éditeurs HTML de l'époque.; la variante frameset normalise la technique des jeux de cadres composant une ressource unique à partir de plusieurs pages web assemblées par le navigateur.
Ces variantes perdurent par la suite sans modifications notables en HTML 4.01 et dans le format de transition XHTML 1.0 issu de HTML. La dernière spécification de HTML est la 4.01 datant du 24 décembre 1999. Elle n'apporte que des corrections mineures à la version 4.0.

2000-2006 : XHTML
Le développement de HTML en tant qu'application du Standard Generalized Markup Language (SGML) est officiellement abandonné au profit de XHTML, application de Extensible Markup Language (XML). Cependant, en 2004, des fabricants de navigateurs web créent le web Hypertext Application Technology Working Group (WHATWG) dans le but, notamment, de relancer le développement du format HTML et de répondre aux nouveaux besoins sur une base technologique jugée plus aisément implémentable que celle du XHTML 2.0 en cours de conception. Ceci s'inscrit dans le contexte d'une contestation plus générale du mode de fonctionnement du W3C, réputé trop fermé par une partie des développeurs et designers web.

2007 à nos jours : HTML 5 et abandon du XHTML 2
En mars 2007, tirant la conséquence des réticences d'une partie de l'industrie et des concepteurs de contenus web face à XHTML 2.0, le W3C relance le développement de HTML et crée un nouveau groupe de travail encadré par Chris Wilson (Microsoft) et initialement Dan Connolly (W3C), maintenant Michael Smith (W3C). Il s'agit notamment : de faire évoluer HTML pour décrire la sémantique des documents mais aussi les applications en ligne ;; de parvenir à un langage extensible via XML tout en maintenant une version non XML compatible avec les analyseurs syntaxiques (parsers) HTML des navigateurs actuels ;; et d'enrichir les interfaces utilisateurs avec des contrôles spécifiques : barres de progrès, menus, champs associés à des types de données spécifiques.
Les travaux du WHATWG ont été formellement adoptés en mai 2007 comme point de départ d'une nouvelle spécification HTML5. Ce document a été publié sous forme de Working Draft le 22 janvier 2008. Parmi les principes de conception évoqués par le groupe de travail figurent en particulier : la compatibilité des futures implémentations HTML avec le contenu web existant, et la possibilité pour d'anciens agents utilisateurs d'exploiter les futurs contenus HTML 5 ;; une approche pragmatique, préférant les évolutions aux modifications radicales, et adoptant les technologies ou pratiques déjà largement partagées par les auteurs de contenus actuels ;; la priorité donnée, en cas de conflit d'intérêt, aux besoins des utilisateurs sur ceux des auteurs, et par suite, à ceux des auteurs sur les contraintes d'implémentation par les navigateurs ;; le compromis entre la richesse sémantique du langage et l'utilité pratique des solutions disponibles pour remplir l'objectif majeur d'indépendance envers le média de restitution.
Une Accessibility Task Force est créée par le W3C en novembre 2009 afin de résoudre les problèmes de compatibilité du nouveau format avec les normes d'accessibilité, liés notamment à l'implémentation d'ARIA, aux alternatives textuelles et aux nouveaux éléments canvas et video.
Le développement de XHTML 2.0 est initialement poursuivi en parallèle, en réponse aux besoins d'autres secteurs du web, tels que les périphériques mobiles, les applications d'entreprise et les applications serveurs. Puis, en juillet 2009, le W3C décide la non-reconduction du XHTML 2 Working Group à la fin 2009.
Avec l'abandon du XHTML 2, la version XHTML 1.1 reste donc la version normalisée. Le HTML5 sera compatible avec le XHTML et le XML, et autorisera donc des documents XHTML5. Cependant, il est probable que le W3C s'oriente vers un abandon pur et simple du XHTML 1.1, car l'implantation du XML dans le HTML5 rend inutile la définition de document de type XHTML y.y (où y.y sont les numéros de version).

L'avenir du HTML : sans numéro de version
En janvier 2011, des divergences de points de vue entre Ian Hickson (ingénieur chez Google), qui écrit la spécification HTML5, et les membres du groupe de travail du W3C conduisent le WHATWG à créer HTML Living Standard (littéralement : standard vivant du HTML), une spécification de HTML prévue pour être en constante évolution, afin de coller avec les développements rapides de nouvelles fonctionnalités par les développeurs de navigateurs (par opposition à des versions numérotées, donc "fixes").
Le HTML Living Standard a pour but d'inclure le HTML5, et de le développer en permanence. En particulier, dans la version du 22 août 2012, le document de référence explique que le HTML5 du W3C, publié le 22 juin 2012, est basé sur une version du HTML Living Standard, mais que le HTML Living Standard ne s'arrête pas à cette version, et continue à évoluer. Il développe en particulier les différences entre la version W3C (le HTML5) et la version HTML Living Standard (par exemple, les nouveaux bugs ne sont pas pris en compte dans le HTML5, des différences syntaxiques sont répertoriées, et de nouvelles balises créées par le HTML Living Standard ne sont pas incluses dans le HTML5).

Description de HTML
HTML est un langage de description de format de document qui se présente sous la forme d'un langage de balisage dont la syntaxe vient du Standard Generalized Markup Language (SGML).

Syntaxe de HTML
Jusqu'à sa version 4.01 comprise, HTML est formellement décrit comme une application du Standard Generalized Markup Language (SGML). Cependant, les spécifications successives admettent, par différents biais, que les agents utilisateurs ne sont pas, en pratique, des analyseurs SGML conformes. Les navigateurs Web n'ont jamais été capables de déchiffrer l'ensemble des variations de syntaxe permises par SGML ; en revanche ils sont généralement capables de rattraper automatiquement de nombreuses erreurs de syntaxe, suivant la première partie de la "loi de Postel" : "Soyez libéral dans ce que vous acceptez, et conservateur dans ce que vous envoyez" (RFC 791). De fait, les développeurs de pages Web et de navigateurs Web ont toujours pris beaucoup de liberté avec les règles syntaxiques de SGML. Enfin, la document type definition (DTD) de HTML, soit la description technique formelle de HTML, n'a été écrite par Dan Connolly que quelques années après l'introduction de HTML.
Malgré les libertés prises avec la norme, la terminologie propre à SGML est utilisée : document, élément, attribut, valeur, balise, entité, validité, application, etc. Grâce à la DTD, il est possible de vérifier automatiquement la validité d'un document HTML à l'aide d'un parseur SGML.
À l'origine, HTML a été conçu pour baliser (ou marquer) simplement le texte, notamment pour y ajouter des hyperliens. On utilisait un minimum de balises, comme dans le document HTML suivant :
TITLEExemple de HTML-TITLE
Ceci est une phrase avec un A HREF-cible.htmlhyperlien-A.
P
Ceci est un paragraphe ougrave; il n'y a pas d'hyperlien.
Cet exemple contient du texte, cinq balises et une référence d'entité : TITLE est la balise ouvrante de l'élément TITLE.; -TITLE est la balise fermante de l'élément TITLE.; Exemple de HTML est le contenu de l'élément TITLE.; A HREF-cible.html est la balise ouvrante de l'élément A, avec : HREF-cible.html, l'attribut HREF dont la valeur est cible.html.; HREF-cible.html, l'attribut HREF dont la valeur est cible.html.; P est la balise ouvrante de l'élément P. Toutefois, elle est utilisée ici comme s'il s'agissait d'un séparateur de paragraphe, et c'est même ainsi qu'elle est souvent présentée dans les plus anciennes documentations de HTML. Il s'agit de la balise ouvrante du paragraphe dont le contenu est Ceci est un paragraphe ougrave; il n'y a pas d'hyperlien. La balise fermante de l'élément P, qui est optionnelle, est ici omise. L'élément P est implicitement terminé lorsqu'un nouveau paragraphe commence ou que l'élément parent est fermé (cas présent).; ugrave; est une référence d'entité représentant le caractère "ù".; Les balises peuvent être indifféremment écrites en minuscules ou majuscules. L'usage des minuscules devient plus courant car XHTML les impose.
Un document HTML valide est un document qui respecte la syntaxe SGML, n'utilise que des éléments et attributs standardisés, et respecte l'imbrication des éléments décrite par le standard. Il ne manque qu'une déclaration de type de document à l'exemple précédent pour qu'il soit un document HTML 2.0 valide.
Un document valide n'est cependant pas suffisant pour être conforme à la spécification HTML visée. En effet, outre l'exigence de validité, un document conforme est soumis à d'autres contraintes qui ne sont pas exprimées par la définition de type de document (DTD), mais qui le sont par la spécification elle-même. C'est notamment le cas du type de contenu de certains attributs, comme celui de l'attribut datetime : pour être conforme à HTML 4.01, celui-ci doit être lui-même conforme à un sous-ensemble de la norme ISO 8601. Un parseur strictement SGML tel que le validateur HTML du W3C ne peut donc pas garantir la conformité d'un document HTML.

Structure des documents HTML
Dans les premières années, les documents HTML étaient souvent considérés comme des structures plates, et les balises comme des commandes de style. Ainsi la balise p était considérée comme un saut de ligne, et la balise -p était ignorée. Ou encore lorsque JavaScript 1.0 est apparu, il ne donnait accès qu'aux liens et formulaires du document à travers les tables document.forms et document.links.
Avec l'introduction des Cascading Style Sheets et du Document Object Model, il a fallu considérer que les documents HTML ont une véritable structure en arbre, avec un élément racine contenant tous les autres éléments. Les balises ouvrantes et fermantes de ces éléments restent d'ailleurs optionnelles. Cependant, aujourd'hui, on a tendance à baliser chaque élément et à indiquer la DTD. Chaque élément fait partie du contenu d'exactement un autre élément ; cet "arbre du document" est notamment utilisé par la structure de formatage qui en est dérivée pour l'application des feuilles de style en cascade où chaque élément peut avoir un fond, un bord et une marge propres.

Éléments de HTML
La version 4 de HTML décrit 91 éléments. En suivant la spécification de HTML 4, les fonctionnalités implémentées par HTML peuvent être réparties ainsi : Structure générale d'un document HTML : Au plus haut niveau, un document HTML est séparé entre un en-tête et un corps. L'en-tête contient les informations sur le document, notamment son titre et éventuellement des métadonnées. Le corps contient ce qui est affiché. Informations sur la langue : Il est possible d'indiquer la langue de n'importe quelle partie du document et de gérer le mélange de texte s'écrivant de gauche à droite avec du texte de droite à gauche. Marquage sémantique : HTML permet de différencier des contenus spécifiques tels que les citations d'oeuvres externes, les extraits de code informatique, les passages en emphase et les abréviations. Certains de ces éléments, conçus initialement pour permettre le support de documentations techniques, sont très rarement employés (différenciation entre les éléments de variable et d'exemple de valeur dans un code informatique, par exemple, ou encore instance d'un terme défini dans le contexte). Listes : HTML différencie des listes non ordonnées et des listes ordonnées, selon que l'ordre formel du contenu dans le code est en soi ou non une information. Des listes de définition existent également, mais sans que leur champ d'application ne soit exactement déterminé. Tables : Cette fonctionnalité a été développée pour permettre la présentation de données tabulaires mais a été immédiatement exploitée pour ses puissantes capacités de mise en page. Hyperliens : La fonctionnalité première de HTML. Inclusion d'images, d'applets et d'objets divers : À l'origine HTML permettait seulement de donner des hyperliens sur les médias externes. L'invention d'éléments spécialisés pour le multimédia a permis l'inclusion automatique d'image, de musique, de vidéo, etc. dans les pages web. Éléments de regroupement : Ne conférant pas de signification au contenu qu'ils balisent, ces éléments génériques permettent d'appliquer des styles de présentation, de réaliser des traitements via des scripts ou tout autre opération nécessitant d'isoler une partie du contenu. Style de la présentation : Chaque élément, voire tout le document, peut se voir appliquer des styles. Les styles sont définis dans le document ou proviennent de feuilles de style en cascade (CSS) externes. Marquage de présentation du texte : Développé avant la généralisation de CSS pour fournir rapidement des fonctionnalités aux graphistes. D'usage désormais officiellement déconseillé pour la plus grande partie. Cadres : Aussi connu sous le nom de frames, une fonctionnalité souvent décriée qui permet d'afficher plusieurs documents HTML dans une même fenêtre. Formulaire pour l'insertion interactive de données : Les éléments de formulaire permettent aux visiteurs d'entrer du texte et des fichiers dans les pages Web. Scripts : Permet d'associer des morceaux de programmes aux actions des utilisateurs sur le document. Les langages utilisés sont généralement JavaScript et VBScript.
Attributs de HTML
Les attributs permettent de préciser les propriétés des éléments HTML. Il y a 188 attributs dans la version 4 de HTML.
Certains attributs s'appliquent à presque tous les éléments : les attributs génériques id (identificateur unique) et class (identificateur répétable) destinés à permettre l'application de traitements externes, tels que l'application de styles de présentation ou de manipulation de l'arbre du document via un langage de script. Il s'y ajoute l'attribut style permettant de définir le style de présentation de l'élément (généralement en CSS), et l'attribut title apportant une information complémentaire de nature le plus souvent libre (L'exception majeure est l'utilisation du title pour déterminer le style permanent et les éventuels styles alternatifs appliqués à un document via des éléments link).; les attributs d'internationalisation dir et lang spécifiant la direction d'écriture et la langue du contenu ;; les gestionnaires d'évènements onclick, ondblclick, onkeydown, onkeypress, onkeyup, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, qui capturent les évènements générés dans l'élément pour appeler un script.
D'autres attributs sont propres à un élément unique, ou des éléments similaires. Par exemple : les éléments qui permettent d'inclure dans le document des ressources graphiques sont dotés d'attributs de hauteur et de largeur, afin que le navigateur puisse anticiper la taille de la ressource à afficher avant que celle-ci n'ait été téléchargée : img, object, iframe.; des éléments spécifiques sont dotés d'un attribut assumant une fonction unique, tel que l'élément label des étiquettes des contrôles de formulaire et son attribut for désignant le contrôle concerné : c'est, en HTML, et avec les attributs usemap et ismap des images, l'une des très rares associations explicites et formalisées entre des éléments, indépendamment de leur ordre linéaire dans le code source.
La plupart des attributs sont facultatifs. Quelques éléments ont cependant des attributs obligatoires : de par leur nature : l'élément img est obligatoirement doté d'un attribut src spécifiant l'URI de la ressource graphique qu'il représente. Il en est de même de tous les éléments dits "vides" et "remplacés" qui, au prix d'une entorse aux règles SGML, n'ont pas de contenu propre. C'est également le cas d'éléments non vides pour des raisons fonctionnelles, comme l'élément form dont l'attribut action indique la cible serveur qui traitera les données après soumission ;; pour des raisons liées à l'accessibilité du contenu : les images sont ainsi dotées d'un attribut obligatoire alt permettant d'indiquer un contenu textuel brut destiné à remplacer la ressource graphique dans les contextes de consultation où elle ne peut pas être restituée ou perçue.
Le type de contenu des attributs HTML échappe pour partie au champ d'application de cette norme, et sa validation relève de normes tierces telles que les URI, les types de contenu ou les codes de langages.
Certains attributs sont enfin de type booléen. Ce sont les seuls attributs dont la syntaxe peut être validement implicite en HTML : l'attribut selected d'un contrôle de formulaire peut ainsi être raccourci sous la forme selected remplaçant la forme complète selected-"selected". Cette forme particulière est un des points différenciant HTML de la syntaxe des documents "bien formés" au sens XML.

Jeu de caractères
Les pages Web peuvent être rédigées dans toutes sortes de langues et de très nombreux caractères peuvent être utilisés, ce qui requiert soit un jeu de caractères par type d'écriture, soit un jeu de caractères universel. Lors de l'apparition de HTML, le jeu de caractères universel Unicode n'était pas encore inventé, et de nombreux jeux de caractères se côtoyaient, notamment ISO-8859-1 pour l'alphabet latin et ouest-européen, Shift-JIS pour le japonais, KOI8-R pour le cyrillique. Aujourd'hui, le codage UTF-8 de Unicode est le plus répandu.
Le protocole de communication HTTP transmet le nom du jeu de caractères. L'en-tête HTML peut comporter le rappel de ce jeu de caractères, qui devrait être identique, sauf erreur de réglage. Enfin, à la suite d'un mauvais réglage, le jeu de caractères réellement utilisé peut encore différer du jeu annoncé. Ces mauvais réglages causent généralement des erreurs d'affichage du texte, notamment pour les caractères non couverts par la norme ASCII.
Avant la généralisation d'Unicode, des entités ont été définies pour représenter certains caractères non ASCII. Cela a commencé avec les caractères d'ISO 8859-1 dans la norme HTML 2.0. Pour diacritiques, ces entités suivent un principe simple : la lettre suivie de l'abréviation de la diacritique associée.

Interopérabilité de HTML
Tel qu'il a été formalisé par le W3C, HTML est conçu pour optimiser l'interopérabilité des documents. Le HTML ne sert pas à décrire le rendu final des pages web. En particulier, contrairement à la publication assistée par ordinateur, HTML n'est pas conçu pour spécifier l'apparence visuelle des documents. HTML est plutôt conçu pour donner du sens aux différentes parties du texte : titre, liste, passage important, citation, etc. Le langage HTML a été développé avec l'intuition que les appareils de toutes sortes seraient utilisés pour consulter le web : les ordinateurs personnels avec des écrans de résolution et de profondeur de couleurs variables, les téléphones portables, les appareils de synthèse et de reconnaissance de la parole, les ordinateurs avec une bande passante faible comme élevée, et ainsi de suite.
Comme HTML ne s'attache pas au rendu final du document, un même document HTML peut être consulté à l'aide de matériels et logiciels très divers. Au niveau matériel, un document peut notamment être affiché sur un Écran d'ordinateur en mode graphique ou un terminal informatique en mode texte, il peut être imprimé, ou il peut être prononcé par synthèse vocale. Au niveau logiciel, HTML ne fait pas non plus de supposition, et plusieurs types de logiciels lisent le HTML : navigateur web, robot d'indexation, scripts divers (en Perl, PHP) de traitement automatique.
Un haut degré d'interopérabilité permet de baisser les coûts des fournisseurs de contenus car une seule version de chaque document sert des besoins très variés. Pour l'utilisateur du web, l'interopérabilité permet l'existence de nombreux navigateurs concurrents, tous capables de consulter l'ensemble du web.
Chaque version HTML a essayé de refléter le plus grand consensus entre les acteurs de l'industrie, de sorte que les investissements consentis par les fournisseurs de contenus ne soient pas gaspillés et que leurs documents ne deviennent en peu de temps illisibles. La séparation du fond et de la forme n'a pas toujours été respectée au cours du développement du langage, comme en témoigne par exemple le balisage de style de texte, qui permet d'indiquer notamment la police de caractères souhaitée pour l'affichage, sa taille, ou sa couleur.

Voir aussi

Articles connexes: World Wide Web; World Wide Web Consortium (W3C); Élément HTML; Identificateur de fragment; Extensible Hypertext Markup Language (XHTML); HTML5; SGML; SELFHTML une documentation en ligne de la syntaxe HTML; JHTML.