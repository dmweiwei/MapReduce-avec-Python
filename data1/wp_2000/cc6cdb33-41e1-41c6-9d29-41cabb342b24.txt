Le PostScript est un langage de description de page mis au point par Adobe. Il repose sur des formulations vectorielles de la plupart de ses éléments. Il sait aussi traiter les images matricielles (en mode point).
Ce langage entre plates-formes permet d'obtenir un fichier unique comportant tous les éléments décrivant la page (textes, images, polices, couleurs, etc.).
PostScript est devenu pratiquement un standard, la plupart des imprimantes laser contiennent un interpréteur et peuvent traiter directement un document décrit selon ce format. Sur les autres, il faut utiliser un filtre logiciel en entrée pour convertir le langage PostScript au format raster compréhensible ces imprimantes.
Le développement du PostScript est arrêté par Adobe depuis 2007, afin que le PDF puisse prendre la relève.
D'autres descendants de PostScript sont : Display PostScript et NeWS, tous deux concernant les systèmes de fenêtrage ;; EPS (pour Encapsulated PostScript), format d'image, basé sur PostScript.

Le langage
Postscript est un langage complet, qui permet le codage de tout algorithme. Bien qu'il soit tout à fait possible d'écrire directement de tels programmes, ils sont en général fabriqués par d'autres programmes, des pilotes d'impression par exemple.
Le Postscript est indissociable de l'environnement dans lequel il sera exécuté. Étant donné le caractère totalement dynamique de ce langage, il sera en fait interprété.
L'interpréteur fonctionne en manipulant une pile et plusieurs dictionnaires. La pile sert de stockage temporaire pour les paramètres des fonctions, puis pour leurs résultats. Les dictionnaires permettent le stockage des variables, ainsi que le code des fonctions.
Un programme PostScript est composé d'une séquence de mots séparés par des espaces, tabulation (TAB), retour chariot (CR), avance de ligne (LF), ou commentaires. L'interpréteur analyse chaque mot du programme PostScript séquentiellement en fonctionnant comme un calculateur en notation polonaise inverse, c'est-à-dire que chaque mot est évalué, puis le (ou les) résultat(s) de cette évaluation est placé au sommet de la pile, et ainsi de suite.
Exemple, pour effectuer le calcul numérique simple b - 4ac, cela pourra se coder : b b mul 4 a mul c mul sub
PostScript supporte les cinq types de mots suivants : Constante numérique : Entière (123) ou réelle (3.14159), l'évaluation ajoute la valeur numérique au sommet de la pile ; Constante chaîne : Ce sont des tableaux de caractères encadrés par des parenthèses, ex (Abc) représente la chaîne "Abc" ; Référence à un nom : -a représente le nom "a", qui pourra permettre de nommer une variable ou une fonction ; la référence est ajoutée au sommet de la pile ; Nom : ce peut être le nom d'une procédure prédéfinie ou créée, d'une variable, d'un dictionnaire ; le nom est cherché dans les dictionnaires actifs, puis si c'est une valeur, elle est placée sur la pile, et si c'est une fonction, elle est appelée (exécutée) ; l'évaluation d'une fonction pourrait utiliser les valeurs au sommet de la pile et les remplacer par les éventuels résultats ; Constructeur : quatre constructeurs permettent de créer des structures de données de taille variable, ils sont composés de caractères appariés suivants, qui délimitent le début et la fin de la structure : (et) : des tableaux quelconques ;; et : des tableaux d'octets codés en hexadécimal ;; et : des dictionnaires ;; (et) : du code exécutable. La première partie du constructeur place une marque sur la pile, puis les éléments de cette structure sont placés successivement sur la pile, enfin la partie droite du constructeur récupère tous les éléments depuis la dernière marque dans la pile et "fabrique" la structure correspondante et la met sur la pile.
Les dictionnaires sont des tableaux avec seulement deux colonnes : la première colonne peut contenir une valeur utilisée comme index, ou une référence à un nom ou à tout autre objet, cependant le nom ou la valeur est unique dans cette colonne pour toutes les lignes du tableau ;; et la seconde, une valeur quelconque associée à ce nom ou cette valeur.
Avec cette propriété, un dictionnaire fonctionne donc comme un tableau à une colonne, mais dont l'index peut être de valeur ou de type quelconque, et n'est pas restreint à un simple intervalle d'entiers.
Le dictionnaire est géré comme une table de hachage (grâce à une fonction de hachage prédéfinie par le langage lui-même) et on peut en prédéfinir lors de sa création la taille initiale en fonction du nombre de couples nom-valeur qu'on veut y stocker, pour limiter les collisions (cependant PostScript sait redimensionner dynamiquement un dictionnaire en fonction du nombre de collisions sur les noms, ou de son taux de remplissage). Les dictionnaires de PostScript servent principalement (mais pas seulement) à définir (dynamiquement) la portée des variables nommées et référencées ailleurs dans le langage.
Parmi les opérateurs prédéfinis, le plus important est def, il permet d'ajouter une association nom-valeur dans le dictionnaire courant, ce qui permet de définir de nouvelles variables avec leur valeur, ou de modifier leur valeur, et de définir ou redéfinir des fonctions. On constate donc, qu'en Postscript, le code exécutable est une donnée, presque comme les autres, et peut être créé à la volée, modifié.
Exemples : -pi 3.14159 def : définit la variable de nom pi, avec la valeur numérique 3,14159 ;; -compteur compteur 1 add def : ajoute 1 à la variable nommée compteur ;; -incremente (1 add) def : définit la fonction incremente, qui ajoute 1 au paramètre ;; -compteur compteur incremente def : recherche la valeur associée à la variable nommée "compteur" dans le dictionnaire actuel et remplace ce nom par sa valeur, puis cette valeur est incrémentée grâce à la fonction définie au-dessus, et le résultat est stocké (par la fonction "def") dans la variable nommée par "-compteur" dans le dictionnaire actuel. Autrement dit, la variable nommée "compteur" dans la portée d'un dictionnaire (en commençant la recherche par le dictionnaire actuel) sera incrémentée.
Dans le dernier exemple ci-dessus, rien n'indique que la variable nommée "compteur" sera la même que celle dont on a extrait la valeur. En effet, "def" sert à stocker une association nom-valeur uniquement dans le dictionnaire actuel, et aucun des autres dictionnaires dans la pile de portée. Or, la lecture de la variable compteur (la seconde référence dans le code ci-dessus) peut retourner la valeur d'une variable trouvée dans autre dictionnaire que le dictionnaire actuel (ou produire une exception à l'exécution si aucun des dictionnaires dans la pile de portée ne contient une variable de ce nom) : dans ce cas, une nouvelle variable sera ajoutée par "def" dans le dictionnaire actuel, sans modifier la variable d'origine où elle a été trouvée et qui conservera donc sa valeur ; cependant tant que le dictionnaire courant sera actif, la nouvelle variable masquera l'ancienne. Ce dispositif permet donc de gérer des variables locales autrement que par une position relative dans la pile.
PostScript peut différencier les références à une variable (par son nom indiqué après un -) et celles à sa valeur. Cependant la référence n'est résolue dans aucune dictionnaire de portée tant qu'on ne l'a pas associée à un dictionnaire pour la rechercher. Quand un nom est utilisé sans - initial, il est immédiatement recherché lors de la compilation de la fonction dans les dictionnaires de portée actifs (en commençant par le dictionnaire courant lors de la compilation et non celui qui sera actif à l'exécution de la fonction), alors le nom de la variable est remplacé à l'exécution dans la pile par la valeur associée à ce nom dans le dictionnaire où le nom a été trouvé.
Aussi, pour créer une référence complète à une variable bien définie et non sa valeur ou une autre variable de même nom dans un autre dictionnaire, on doit indiquer non seulement le nom de cette variable, mais aussi une référence au dictionnaire qui la contient et où elle doit être recherchée. Si on ne référence pas le dictionnaire (par exemple en ne préfixant pas par un -), la résolution du nom est dynamique et peut donc référencer des variables différentes en fonction du contexte d'exécution.
Postcript définit donc deux contextes distincts d'utilisation d'une référence à une variable : dans le contexte de compilation d'une définition de fonction, la référence trouvée dans le dictionnaire courant (au moment de la compilation) est résolue immédiatement, mais la valeur n'est pas immédiatement déréférencée ; au lieu de cela, la référence est empilée et sera stockée ensuite dans le code au moment où la fonction sera effectivement définie ;; puis lorsque le code de la fonction est exécutée, toute référence de variable empilée s'exécute en la remplaçant dans par la valeur de la variable indépendamment du dictionnaire courant.
Ce comportement pour le déréferencement d'une variable (accès en lecture) est donc très différent de celui du stockage d'une variable avec def qui se fait toujours selon le dictionnaire courant au seul moment de l'exécution.

Opérateurs
. tout. pop. -. élimine l'élément de la pile. tout1. tout2. exch. tout2. tout1. échange les deux éléments....... nombre1. nombre2. add. somme. renvoie nombre1 plus nombre2. nombre1. nombre2. div. quotient. renvoie nombre1 divisé nombre2. entier1. entier2. idiv. quotient. renvoie entier1 divisé entier2.......
Implémentation
PostScript est sous licence de la société Adobe. Néanmoins il existe un interpréteur PostScript libre, Ghostscript.

Voir aussi

Articles connexes: Encapsulated PostScript (EPS) - Format d'images en Postscript; Ghostscript - Interpréteur PostScript et PDF, libre, toutes plates-formes et ses interfaces graphiques : GSView, etc.; Portable Document Format; Printer Postscript Description; Fontes PostScript; SVG; TeX; LaTeX; Printer Command Language; XML Paper Specification - Format de description de pages développé par Microsoft; Forth - Langage de programmation basé sur les mêmes principes (pile, dictionnaire, notation polonaise inverse...).